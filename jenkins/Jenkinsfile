pipeline {
    agent any

    parameters {
        booleanParam(name: 'check_podman_down', defaultValue: false, description: 'Tear down containers after run?')
    }

    environment {
        REPO_URL = "https://github.com/brt4c3/rhel_docker_example.git"
        REPO_NAME = "rhel_docker_example"
        REPO_DIR = "${REPO_NAME}_${BUILD_NUMBER}"
    }

    stages {
        stage('Check Internet Connectivity') {
            steps {
                script {
                    def connected = sh(script: "curl -sSf https://github.com > /dev/null", returnStatus: true)
                    if (connected != 0) {
                        error "‚ùå No internet connection. Exiting."
                    }
                }
            }
        }

        stage('Clone Git Repository') {
            steps {
                sh """
                    rm -rf ${REPO_DIR}
                    git clone ${REPO_URL} ${REPO_DIR}
                    echo "[‚úî] Repository cloned into ${REPO_DIR}"
                    ls ${REPO_DIR}/jenkins || echo "No Jenkins scripts found"
                    ls ${REPO_DIR}/ansible || echo "No Ansible scripts found"
                """
            }
        }

        stage('Pull Podman Images') {
            steps {
                dir("${REPO_DIR}") {
                    sh """
                        echo 'üì¶ Pulling db2 image...'
                        podman pull docker.io/ibmcom/db2:11.5.0.0 || true

                        echo 'üì¶ Pulling open-liberty image...'
                        podman pull docker.io/open-liberty:kernel-slim-java11 || true
                    """
                }
            }
        }

        stage('Start Podman Compose') {
            steps {
                dir("${REPO_DIR}") {
                    sh """
                        echo 'üöÄ Starting containers using podman-compose...'
                        podman-compose -f compose.yml up -d --build || exit 1
                    """
                }
            }
        }

        stage('Setup DB2 with Ansible') {
            steps {
                dir("${REPO_DIR}") {
                    sh """
                        echo '‚öôÔ∏è Running DB2 Ansible setup...'
                        ansible-playbook -i ansible/inventory ansible/setup_db2.yml
                    """
                }
            }
        }

        stage('Setup Open Liberty with Ansible') {
            steps {
                dir("${REPO_DIR}") {
                    sh """
                        echo '‚öôÔ∏è Running OpenLiberty Ansible setup...'
                        ansible-playbook -i ansible/inventory ansible/setup_ol_app.yml
                    """
                }
            }
        }

        stage('Optional Tear Down') {
            when {
                expression { return params.check_podman_down == true }
            }
            steps {
                dir("${REPO_DIR}") {
                    sh """
                        echo 'üßπ Optionally tearing down containers...'
                        podman-compose down || true
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßº Cleaning up environment"
                dir("${REPO_DIR}") {
                    sh 'podman-compose down || true'
                }
                sh 'podman ps -a || true'
                cleanWs()
            }
        }
    }
}
